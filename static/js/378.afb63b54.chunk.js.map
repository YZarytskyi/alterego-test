{"version":3,"file":"static/js/378.afb63b54.chunk.js","mappings":"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","sources":["pages/LoginPage/LoginPage.tsx","pages/LoginPage/schema.ts","utils/firebase.ts"],"sourcesContent":["import { useState } from 'react';\r\nimport Avatar from '@mui/material/Avatar';\r\nimport Button from '@mui/material/Button';\r\nimport TextField from '@mui/material/TextField';\r\nimport FormControlLabel from '@mui/material/FormControlLabel';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport backgroundImg from 'assets/login.jpg'\r\nimport Box from '@mui/material/Box';\r\nimport Grid from '@mui/material/Grid';\r\nimport LockOutlinedIcon from '@mui/icons-material/LockOutlined';\r\nimport Typography from '@mui/material/Typography';\r\nimport { yupResolver } from '@hookform/resolvers/yup';\r\nimport { Link, Navigate } from 'react-router-dom';\r\nimport { signInWithEmailAndPassword } from 'firebase/auth';\r\nimport { useAppDispatch, useAppSelector } from 'hooks/redux-hooks';\r\nimport { auth } from 'utils/firebase';\r\nimport { setAuthData } from 'store/auth/authSlice';\r\nimport { useForm } from 'react-hook-form';\r\nimport { schema } from './schema';\r\n\r\ninterface IFormInputs {\r\n  email: string;\r\n  password: string;\r\n}\r\n\r\nexport default function LoginPage() {\r\n  const dispatch = useAppDispatch();\r\n  const token = useAppSelector(state => state.auth.token);\r\n\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState<string>('');\r\n\r\n  const handleLogIn = async (email: string, password: string) => {\r\n    try {\r\n      const { user }: any = await signInWithEmailAndPassword(\r\n        auth,\r\n        email,\r\n        password\r\n      );\r\n      const userToken = user.accessToken;\r\n      const userEmail = user.email;\r\n      dispatch(setAuthData({ userToken, userEmail }));\r\n    } catch (error: any) {\r\n      setError(`⚠ Your email or password is incorrect`);\r\n    }\r\n  };\r\n\r\n  const {\r\n    register,\r\n    handleSubmit,\r\n    formState: { errors },\r\n  } = useForm<IFormInputs>({ resolver: yupResolver(schema) });\r\n  const onSubmit = (data: IFormInputs) => {\r\n    setError('');\r\n    setLoading(true);\r\n    handleLogIn(data.email, data.password);\r\n    setLoading(false);\r\n  };\r\n\r\n  if (token) {\r\n    return <Navigate to=\"/\" />;\r\n  }\r\n\r\n  return (\r\n    <Grid container component=\"main\" sx={{ height: 'calc(100vh - 110px)' }}>\r\n      <Grid\r\n        item\r\n        xs={false}\r\n        sm={4}\r\n        md={7}\r\n        sx={{\r\n          backgroundImage: `url(${backgroundImg})`,\r\n          backgroundRepeat: 'no-repeat',\r\n          backgroundSize: 'cover',\r\n          backgroundPosition: 'center',\r\n        }}\r\n      />\r\n      <Grid item xs={12} sm={8} md={5}>\r\n        <Box\r\n          sx={{\r\n            my: 10,\r\n            display: 'flex',\r\n            flexDirection: 'column',\r\n            alignItems: 'center',\r\n          }}\r\n        >\r\n          <Avatar sx={{ m: 1, bgcolor: 'secondary.main' }}>\r\n            <LockOutlinedIcon />\r\n          </Avatar>\r\n          <Typography component=\"h1\" variant=\"h5\">\r\n            Login\r\n          </Typography>\r\n          <Box\r\n            component=\"form\"\r\n            noValidate\r\n            onSubmit={handleSubmit(onSubmit)}\r\n            sx={{ mt: 1 }}\r\n          >\r\n            <TextField\r\n              id=\"email\"\r\n              {...register('email')}\r\n              margin=\"normal\"\r\n              fullWidth\r\n              label=\"Email\"\r\n              name=\"email\"\r\n              autoComplete=\"email\"\r\n              autoFocus\r\n            />\r\n            <Typography\r\n              component=\"p\"\r\n              sx={{ color: 'red', fontSize: 14, margin: '5px 0' }}\r\n            >\r\n              {errors.email?.message ? errors.email?.message : ' '}\r\n            </Typography>\r\n            <TextField\r\n              id=\"password\"\r\n              {...register('password')}\r\n              margin=\"normal\"\r\n              fullWidth\r\n              name=\"password\"\r\n              label=\"Password\"\r\n              type=\"password\"\r\n              autoComplete=\"current-password\"\r\n            />\r\n            <Typography\r\n              component=\"p\"\r\n              sx={{ color: 'red', fontSize: 14, margin: '5px 0' }}\r\n            >\r\n              {errors.password?.message ? errors.password?.message : ' '}\r\n            </Typography>\r\n            <FormControlLabel\r\n              control={<Checkbox value=\"remember\" color=\"primary\" />}\r\n              label=\"Remember me\"\r\n            />\r\n            <Typography\r\n              component=\"p\"\r\n              sx={{ color: 'red', fontSize: 14 }}\r\n            >\r\n              {error || ''}\r\n            </Typography>\r\n            <Button\r\n              type=\"submit\"\r\n              fullWidth\r\n              variant=\"contained\"\r\n              sx={{ mt: 3, mb: 2 }}\r\n            >\r\n              Login\r\n            </Button>\r\n            <Grid container>\r\n              <Grid item>\r\n                <Link to=\"/register\">Don't have an account? Sign Up</Link>\r\n              </Grid>\r\n            </Grid>\r\n          </Box>\r\n        </Box>\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n}\r\n","import * as yup from 'yup';\r\n\r\nexport const schema = yup.object({\r\n  email: yup\r\n    .string()\r\n    .email('⚠ Invalid email')\r\n    .required('⚠ This field is required'),\r\n  password: yup\r\n    .string()\r\n    .required('⚠ This field is required')\r\n    .min(8, '⚠ Min length - 8 chars'),\r\n});\r\n","import { initializeApp } from \"firebase/app\";\r\nimport { getAuth } from \"firebase/auth\"\r\n\r\n\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyC_lE0668hwlYXylLiPMPNLaXMvLYEaKTw\",\r\n  authDomain: \"alterego-test.firebaseapp.com\",\r\n  projectId: \"alterego-test\",\r\n  storageBucket: \"alterego-test.appspot.com\",\r\n  messagingSenderId: \"373581046067\",\r\n  appId: \"1:373581046067:web:6bf2251b42e6a36bd7de46\"\r\n}\r\n\r\nconst firebaseSetup = initializeApp(firebaseConfig);\r\n\r\nexport const auth = getAuth(firebaseSetup)\r\nexport default firebaseSetup"],"names":["LoginPage","dispatch","useAppDispatch","token","useAppSelector","state","auth","useState","setLoading","error","setError","handleLogIn","email","password","signInWithEmailAndPassword","user","userToken","accessToken","userEmail","setAuthData","useForm","resolver","yupResolver","schema","register","handleSubmit","errors","formState","to","Grid","container","component","sx","height","item","xs","sm","md","backgroundImage","backgroundImg","backgroundRepeat","backgroundSize","backgroundPosition","Box","my","display","flexDirection","alignItems","Avatar","m","bgcolor","LockOutlined","Typography","variant","noValidate","onSubmit","data","mt","TextField","id","margin","fullWidth","label","name","autoComplete","autoFocus","color","fontSize","message","type","FormControlLabel","control","Checkbox","value","Button","mb","yup","required","min","firebaseSetup","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","getAuth"],"sourceRoot":""}