{"version":3,"file":"static/js/375.f75ba59e.chunk.js","mappings":"iKAEaA,EAASC,EAAAA,GAAW,CAC/BC,MAAOD,EAAAA,KAEJC,MAAM,wBACNC,SAAS,iCACZC,SAAUH,EAAAA,KAEPE,SAAS,iCACTE,IAAI,EAAG,gC,sXCiBG,SAASC,IAAgB,IAAD,QAC/BC,GAAWC,EAAAA,EAAAA,KACXC,GAAQC,EAAAA,EAAAA,IAAe,SAAAC,GAAK,OAAIA,EAAMC,KAAKH,KAAK,IAC9CI,GAAMC,EAAAA,EAAAA,MAAND,EAER,GAA8BE,EAAAA,EAAAA,WAAS,GAAM,eAAtCC,EAAO,KAAEC,EAAU,KAC1B,GAA0BF,EAAAA,EAAAA,UAAiB,IAAG,eAAvCG,EAAK,KAAEC,EAAQ,KAEhBC,EAAM,yCAAG,WAAOlB,EAAeE,GAAgB,8GAEViB,EAAAA,EAAAA,IACrCT,EAAAA,EACAV,EACAE,GACA,KAAD,WAJOkB,EAAI,EAAJA,KAKFC,EAAYD,EAAKE,aACjBC,EAAYH,EAAKpB,MACvBK,GAASmB,EAAAA,EAAAA,IAAY,CAAEH,UAAAA,EAAWE,UAAAA,KAAc,kDAE5C,gBAAiBE,QACbC,EAAe,KAAMC,QAAQC,MAAM,IACzCX,EAAS,UAAD,OAAMS,KACf,QAEiB,OAFjB,UAEDX,GAAW,GAAO,6EAErB,gBAlBW,wCAoBZ,GAIIc,EAAAA,EAAAA,IAAqB,CAAEC,UAAUC,EAAAA,EAAAA,GAAYjC,EAAAA,KAH/CkC,EAAQ,EAARA,SACAC,EAAY,EAAZA,aACaC,EAAM,EAAnBC,UAAaD,OASf,OAAI3B,GACK,SAAC,KAAQ,CAAC6B,GAAG,OAIpB,UAACC,EAAA,GAAI,CAACC,WAAS,EAACC,UAAU,OAAOC,GAAI,CAAEC,OAAQ,uBAAwB,WACrE,SAACJ,EAAA,GAAI,CACHK,MAAI,EACJC,IAAI,EACJC,GAAI,EACJC,GAAI,EACJL,GAAI,CACFM,gBAAgB,OAAD,OAASC,EAAa,KACrCC,iBAAkB,YAClBC,eAAgB,QAChBC,mBAAoB,aAGxB,SAACb,EAAA,GAAI,CAACK,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAGC,GAAI,EAAE,UAC9B,UAACM,EAAA,EAAG,CACFX,GAAI,CACFY,GAAI,GACJC,QAAS,OACTC,cAAe,SACfC,WAAY,UACZ,WAEF,SAACC,EAAA,EAAM,CAAChB,GAAI,CAAEiB,EAAG,EAAGC,QAAS,kBAAmB,UAC9C,SAACC,EAAA,EAAgB,OAEnB,SAACC,EAAA,EAAU,CAACrB,UAAU,KAAKsB,QAAQ,KAAI,SACpClD,EAAE,kBAEL,UAACwC,EAAA,EAAG,CACFZ,UAAU,OACVuB,YAAU,EACVC,SAAU9B,GA1CH,SAAC+B,GAChB/C,EAAS,IACTF,GAAW,GACXG,EAAO8C,EAAKhE,MAAOgE,EAAK9D,SAC1B,IAuCUsC,GAAI,CAAEyB,GAAI,EAAGC,MAAO,SAAU,WAE9B,SAACC,EAAA,GAAS,gBACRC,GAAG,SACCpC,EAAS,UAAQ,IACrBqC,OAAO,SACPC,WAAS,EACTC,MAAO5D,EAAE,cACT6D,KAAK,QACLC,aAAa,YAEf,SAACb,EAAA,EAAU,CACTrB,UAAU,IACVC,GAAI,CAAEkC,MAAO,MAAOC,SAAU,GAAIN,OAAQ,SAAU,SAEvC,QAAZ,EAAAnC,EAAOlC,aAAK,OAAZ,EAAc2B,QAAsB,QAAf,EAAGO,EAAOlC,aAAK,aAAZ,EAAc2B,QAAU,OAGnD,SAACwC,EAAA,GAAS,gBACRC,GAAG,YACCpC,EAAS,aAAW,IACxBsC,WAAS,EACTD,OAAO,SACPG,KAAK,WACLD,MAAO5D,EAAE,iBACTiE,KAAK,WACLH,aAAa,mBAEf,SAACb,EAAA,EAAU,CACTrB,UAAU,IACVC,GAAI,CAAEkC,MAAO,MAAOC,SAAU,GAAIN,OAAQ,SAAU,SAEpC,QAAf,EAAAnC,EAAOhC,gBAAQ,OAAf,EAAiByB,QAAyB,QAAlB,EAAGO,EAAOhC,gBAAQ,aAAf,EAAiByB,QAAU,OAGzD,SAACkD,EAAA,EAAgB,CACfC,SAAS,SAACC,EAAA,EAAQ,CAACC,MAAM,mBAAmBN,MAAM,YAClDH,MAAO5D,EAAE,iBAEX,SAACiD,EAAA,EAAU,CACTrB,UAAU,IACVC,GAAI,CAAEkC,MAAO,MAAOC,SAAU,GAAIN,OAAQ,SAAU,SAEnDrD,GAAS,MAEZ,SAACiE,EAAA,EAAa,CACZL,KAAK,SACL9D,QAASA,EACToE,iBAAiB,gBACjBZ,WAAS,EACTT,QAAQ,YACRrB,GAAI,CAAEyB,GAAI,EAAGkB,GAAI,GAAI,UAErB,0BAAOxE,EAAE,oBAEX,SAAC0B,EAAA,GAAI,CAACC,WAAS,EAAC8C,eAAe,SAAQ,UACrC,SAAC/C,EAAA,GAAI,CAACK,MAAI,YACR,SAAC,KAAI,CAACN,GAAG,SAAQ,SAAEzB,EAAE,oCAQrC,C,+EC5JM0E,GAAgBC,EAAAA,EAAAA,IATC,CACrBC,OAAQ,0CACRC,WAAY,gCACZC,UAAW,gBACXC,cAAe,4BACfC,kBAAmB,eACnBC,MAAO,8CAKIlF,GAAOmF,EAAAA,EAAAA,IAAQR,E","sources":["pages/LoginPage/schema.ts","pages/RegisterPage/RegisterPage.tsx","utils/firebase.ts"],"sourcesContent":["import * as yup from 'yup';\r\n\r\nexport const schema = yup.object({\r\n  email: yup\r\n    .string()\r\n    .email('⚠ Invalid email')\r\n    .required('⚠ This field is required'),\r\n  password: yup\r\n    .string()\r\n    .required('⚠ This field is required')\r\n    .min(8, '⚠ Min length - 8 chars'),\r\n});\r\n","import * as React from 'react';\r\nimport Avatar from '@mui/material/Avatar';\r\nimport TextField from '@mui/material/TextField';\r\nimport FormControlLabel from '@mui/material/FormControlLabel';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport Grid from '@mui/material/Grid';\r\nimport Box from '@mui/material/Box';\r\nimport LockOutlinedIcon from '@mui/icons-material/LockOutlined';\r\nimport Typography from '@mui/material/Typography';\r\nimport backgroundImg from 'assets/register.jpg';\r\nimport { Link, Navigate } from 'react-router-dom';\r\nimport { useAppDispatch, useAppSelector } from 'hooks/redux-hooks';\r\nimport { createUserWithEmailAndPassword, UserCredential } from 'firebase/auth';\r\nimport { yupResolver } from '@hookform/resolvers/yup';\r\nimport { useState } from 'react';\r\nimport { auth } from 'utils/firebase';\r\nimport { useForm } from 'react-hook-form';\r\nimport { setAuthData } from 'store/auth/authSlice';\r\nimport { schema } from '../LoginPage/schema';\r\nimport { LoadingButton } from '@mui/lab';\r\nimport { useTranslation } from 'react-i18next';\r\n\r\ninterface IFormInputs {\r\n  email: string;\r\n  password: string;\r\n}\r\n\r\nexport default function RegisterPage() {\r\n  const dispatch = useAppDispatch();\r\n  const token = useAppSelector(state => state.auth.token);\r\n  const { t } = useTranslation();\r\n\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState<string>('');\r\n\r\n  const signUp = async (email: string, password: string) => {\r\n    try {\r\n      const { user }: UserCredential = await createUserWithEmailAndPassword(\r\n        auth,\r\n        email,\r\n        password\r\n      );\r\n      const userToken = user.refreshToken;\r\n      const userEmail = user.email;\r\n      dispatch(setAuthData({ userToken, userEmail }));\r\n    } catch (error) {\r\n      if (error instanceof Error) {\r\n        const errorMessage = error.message.slice(10);\r\n        setError(`⚠ ${errorMessage}`);\r\n      }\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const {\r\n    register,\r\n    handleSubmit,\r\n    formState: { errors },\r\n  } = useForm<IFormInputs>({ resolver: yupResolver(schema) });\r\n\r\n  const onSubmit = (data: IFormInputs) => {\r\n    setError('');\r\n    setLoading(true);\r\n    signUp(data.email, data.password);\r\n  };\r\n\r\n  if (token) {\r\n    return <Navigate to=\"/\" />;\r\n  }\r\n\r\n  return (\r\n    <Grid container component=\"main\" sx={{ height: 'calc(100vh - 108px)' }}>\r\n      <Grid\r\n        item\r\n        xs={false}\r\n        sm={4}\r\n        md={7}\r\n        sx={{\r\n          backgroundImage: `url(${backgroundImg})`,\r\n          backgroundRepeat: 'no-repeat',\r\n          backgroundSize: 'cover',\r\n          backgroundPosition: 'center',\r\n        }}\r\n      />\r\n      <Grid item xs={12} sm={8} md={5}>\r\n        <Box\r\n          sx={{\r\n            my: 10,\r\n            display: 'flex',\r\n            flexDirection: 'column',\r\n            alignItems: 'center',\r\n          }}\r\n        >\r\n          <Avatar sx={{ m: 1, bgcolor: 'secondary.main' }}>\r\n            <LockOutlinedIcon />\r\n          </Avatar>\r\n          <Typography component=\"h1\" variant=\"h5\">\r\n            {t('auth.signUp')}\r\n          </Typography>\r\n          <Box\r\n            component=\"form\"\r\n            noValidate\r\n            onSubmit={handleSubmit(onSubmit)}\r\n            sx={{ mt: 1, width: '270px' }}\r\n          >\r\n            <TextField\r\n              id=\"email\"\r\n              {...register('email')}\r\n              margin=\"normal\"\r\n              fullWidth\r\n              label={t('auth.email')}\r\n              name=\"email\"\r\n              autoComplete=\"email\"\r\n            />\r\n            <Typography\r\n              component=\"p\"\r\n              sx={{ color: 'red', fontSize: 14, margin: '5px 0' }}\r\n            >\r\n              {errors.email?.message ? errors.email?.message : ' '}\r\n            </Typography>\r\n\r\n            <TextField\r\n              id=\"password\"\r\n              {...register('password')}\r\n              fullWidth\r\n              margin=\"normal\"\r\n              name=\"password\"\r\n              label={t('auth.password')}\r\n              type=\"password\"\r\n              autoComplete=\"new-password\"\r\n            />\r\n            <Typography\r\n              component=\"p\"\r\n              sx={{ color: 'red', fontSize: 14, margin: '5px 0' }}\r\n            >\r\n              {errors.password?.message ? errors.password?.message : ' '}\r\n            </Typography>\r\n\r\n            <FormControlLabel\r\n              control={<Checkbox value=\"allowExtraEmails\" color=\"primary\" />}\r\n              label={t('auth.promo')}\r\n            />\r\n            <Typography\r\n              component=\"p\"\r\n              sx={{ color: 'red', fontSize: 14, margin: '2px 0' }}\r\n            >\r\n              {error || ''}\r\n            </Typography>\r\n            <LoadingButton\r\n              type=\"submit\"\r\n              loading={loading}\r\n              loadingIndicator=\"Loading…\"\r\n              fullWidth\r\n              variant=\"contained\"\r\n              sx={{ mt: 3, mb: 2 }}\r\n            >\r\n              <span>{t('auth.signUp')}</span>\r\n            </LoadingButton>\r\n            <Grid container justifyContent=\"center\">\r\n              <Grid item>\r\n                <Link to=\"/login\">{t('auth.haveAccount')}</Link>\r\n              </Grid>\r\n            </Grid>\r\n          </Box>\r\n        </Box>\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n}\r\n","import { initializeApp } from \"firebase/app\";\r\nimport { getAuth } from \"firebase/auth\"\r\n\r\n\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyC_lE0668hwlYXylLiPMPNLaXMvLYEaKTw\",\r\n  authDomain: \"alterego-test.firebaseapp.com\",\r\n  projectId: \"alterego-test\",\r\n  storageBucket: \"alterego-test.appspot.com\",\r\n  messagingSenderId: \"373581046067\",\r\n  appId: \"1:373581046067:web:6bf2251b42e6a36bd7de46\"\r\n}\r\n\r\nconst firebaseSetup = initializeApp(firebaseConfig);\r\n\r\nexport const auth = getAuth(firebaseSetup)\r\nexport default firebaseSetup"],"names":["schema","yup","email","required","password","min","RegisterPage","dispatch","useAppDispatch","token","useAppSelector","state","auth","t","useTranslation","useState","loading","setLoading","error","setError","signUp","createUserWithEmailAndPassword","user","userToken","refreshToken","userEmail","setAuthData","Error","errorMessage","message","slice","useForm","resolver","yupResolver","register","handleSubmit","errors","formState","to","Grid","container","component","sx","height","item","xs","sm","md","backgroundImage","backgroundImg","backgroundRepeat","backgroundSize","backgroundPosition","Box","my","display","flexDirection","alignItems","Avatar","m","bgcolor","LockOutlined","Typography","variant","noValidate","onSubmit","data","mt","width","TextField","id","margin","fullWidth","label","name","autoComplete","color","fontSize","type","FormControlLabel","control","Checkbox","value","LoadingButton","loadingIndicator","mb","justifyContent","firebaseSetup","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","getAuth"],"sourceRoot":""}